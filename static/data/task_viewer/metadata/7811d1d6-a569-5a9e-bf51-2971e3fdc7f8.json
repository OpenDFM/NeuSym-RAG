{
    "uuid": "7811d1d6-a569-5a9e-bf51-2971e3fdc7f8",
    "title": "Editing Models with Task Arithmetic",
    "conference": "arxiv",
    "conference_full": "ArXiv",
    "volume": null,
    "year": 2023,
    "authors": [
        "Gabriel Ilharco",
        "Marco Tulio Ribeiro",
        "Mitchell Wortsman",
        "Suchin Gururangan",
        "Ludwig Schmidt",
        "Hannaneh Hajishirzi",
        "Ali Farhadi"
    ],
    "pdf_url": "http://arxiv.org/pdf/2212.04089v3",
    "pdf_path": "data/dataset/airqa/papers/arxiv2023/7811d1d6-a569-5a9e-bf51-2971e3fdc7f8.pdf",
    "bibtex": "@misc{ilharco2023editingmodelswithtaskarithmetic,\n    title = {Editing Models with Task Arithmetic},\n    author = {Gabriel Ilharco and Marco Tulio Ribeiro and Mitchell Wortsman and Suchin Gururangan and Ludwig Schmidt and Hannaneh Hajishirzi and Ali Farhadi},\n    year = {2023},\n    eprint = {2212.04089},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.LG},\n    url = {http://arxiv.org/abs/2212.04089},\n}",
    "abstract": "Changing how pre-trained models behave -- e.g., improving their performance\non a downstream task or mitigating biases learned during pre-training -- is a\ncommon practice when developing machine learning systems. In this work, we\npropose a new paradigm for steering the behavior of neural networks, centered\naround \\textit{task vectors}. A task vector specifies a direction in the weight\nspace of a pre-trained model, such that movement in that direction improves\nperformance on the task. We build task vectors by subtracting the weights of a\npre-trained model from the weights of the same model after fine-tuning on a\ntask. We show that these task vectors can be modified and combined together\nthrough arithmetic operations such as negation and addition, and the behavior\nof the resulting model is steered accordingly. Negating a task vector decreases\nperformance on the target task, with little change in model behavior on control\ntasks. Moreover, adding task vectors together can improve performance on\nmultiple tasks at once. Finally, when tasks are linked by an analogy\nrelationship of the form ``A is to B as C is to D\", combining task vectors from\nthree of the tasks can improve performance on the fourth, even when no data\nfrom the fourth task is used for training. Overall, our experiments with\nseveral models, modalities and tasks show that task arithmetic is a simple,\nefficient and effective way of editing models.",
    "num_pages": 31,
    "tldr": "Task arithmetic steers model behavior by modifying task vectors via arithmetic operations.",
    "tags": [
        "task vectors",
        "neural networks",
        "model editing",
        "fine-tuning",
        "task arithmetic"
    ]
}