{
    "uuid": "0e060d12-30d9-5e34-b7e3-4874dd94be7b",
    "title": "Divide-and-Conquer Meets Consensus: Unleashing the Power of Functions in Code Generation",
    "conference_full": "Conference on Neural Information Processing Systems",
    "conference": "NeurIPS",
    "year": 2024,
    "volume": "NeurIPS 2024 oral",
    "bibtex": "@inproceedings{\nchen2024divideandconquer,\ntitle={Divide-and-Conquer Meets Consensus: Unleashing the Power of Functions in Code Generation},\nauthor={Jingchang Chen and Hongxuan Tang and Zheng Chu and Qianglong Chen and Zekun Wang and Ming Liu and Bing Qin},\nbooktitle={The Thirty-eighth Annual Conference on Neural Information Processing Systems},\nyear={2024},\nurl={https://openreview.net/forum?id=cFqAANINgW}\n}",
    "authors": [
        "Jingchang Chen",
        "Hongxuan Tang",
        "Zheng Chu",
        "Qianglong Chen",
        "Zekun Wang",
        "Ming Liu",
        "Bing Qin"
    ],
    "pdf_url": "https://openreview.net/pdf/d6fd653a659d95ce4466896d76af521361a4e0ef.pdf",
    "pdf_path": "data/dataset/airqa/papers/neurips2024/0e060d12-30d9-5e34-b7e3-4874dd94be7b.pdf",
    "num_pages": 45,
    "abstract": "Despite recent progress made by large language models in code generation, they still struggle with programs that meet complex requirements. Recent work utilizes plan-and-solve decomposition to decrease the complexity and leverage self-tests to refine the generated program. Yet, planning deep-inside requirements in advance can be challenging, and the tests need to be accurate to accomplish self-improvement. To this end, we propose FunCoder, a code generation framework incorporating the divide-and-conquer strategy with functional consensus. Specifically, FunCoder recursively branches off sub-functions as smaller goals during code generation, represented by a tree hierarchy. These sub-functions are then composited to attain more complex objectives. Additionally, we designate functions via a consensus formed by identifying similarities in program behavior, mitigating error propagation. FunCoder outperforms state-of-the-art methods by +9.8% on average in HumanEval, MBPP, xCodeEval and MATH with GPT-3.5 and GPT-4. Moreover, our method demonstrates superiority on smaller models: With FunCoder, StableCode-3b surpasses GPT-3.5 by +18.6% and achieves 97.7% of GPT-4's performance on HumanEval. Further analysis reveals that our proposed dynamic function decomposition is capable of handling complex requirements, and the functional consensus prevails over self-testing in correctness evaluation.",
    "tldr": "FunCoder enhances code generation by using divide-and-conquer with functional consensus.",
    "tags": [
        "programming",
        "language model",
        "code generation",
        "reasoning"
    ]
}