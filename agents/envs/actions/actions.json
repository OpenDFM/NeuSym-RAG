{
    "RetrieveFromDatabase": {
        "action_type": "RetrieveFromDatabase",
        "description": "Generate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.",
        "observation": "The observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.",
        "parameters": {
            "sql": {
                "type": "str",
                "required": true,
                "description": "The concrete DuckDB SQL query to execute and retrieve results."
            }
        },
        "use_cases": [
            {
                "example": {
                    "sql": "SELECT COUNT(DISTINCT pdf_id) FROM meta_data;"
                },
                "explanation": "Get the total number of unique PDFs in the database."
            }
        ]
    },
    "RetrieveFromVectorstore": {
        "action_type": "RetrieveFromVectorstore",
        "description": "Given a query text, retrieve relevant context from the Milvus vectorstore. Please refer to the schema of different collections and fields for each stored data entry.",
        "observation": "The observation space is the retrieved top-ranked entries from the Milvus vectorstore based on input parameters.",
        "parameters": {
            "query": {
                "type": "str",
                "required": true,
                "description": "The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement."
            },
            "collection_name": {
                "type": "str",
                "required": true,
                "description": "The name of the collection in the Milvus vectorstore to search for relevant context. Please ensure the name comes from existing collection names."
            },
            "table_name": {
                "type": "str",
                "required": true,
                "description": "The table name is used to narrow down the search space. It will be added to the filter condition. Please ensure the name comes from existing table names."
            },
            "column_name": {
                "type": "str",
                "required": true,
                "description": "The column name is used to narrow down the search space. It will be added to the filter condition. Please ensure the name comes from existing column names in the specified `table_name`."
            },
            "filter": {
                "type": "str",
                "required": false,
                "default": "",
                "description": "The filter condition to narrow down the search space. Please refer to the syntax of filter conditions. By default, no filter condition. It is suggested to restrict `primary_key`, `pdf_id`, or `page_number` to refine search results. Note that you do not need to restrict `table_name` and `column_name` since they are already specified in the `table_name` and `column_name` parameters. Thus, if the `filter` parameter is empty, the actual filter condition will be `table_name == 'table_name' and column_name == 'column_name'`."
            },
            "limit": {
                "type": "int",
                "required": false,
                "default": 5,
                "description": "The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated."
            },
            "output_fields": {
                "type": "List[str]",
                "required": false,
                "default": [
                    "text"
                ],
                "description": "The fields to return in the output. By default, the `text` field will be returned for text type collections. And the `id` and `distance/score` for each retrieved entry will also be returned."
            }
        },
        "use_cases": [
            {
                "example": {
                    "query": "Does this paper discuss LLM-based agent on its first page? (paper id is '12345678')",
                    "collection_name": "text_bm25_en",
                    "table_name": "chunks",
                    "column_name": "text_content",
                    "filter": "pdf_id == '12345678' and page_number == 1",
                    "limit": 10,
                    "output_fields": [
                        "text"
                    ]
                },
                "explanation": "Search the entire collection `text_bm25_en`, which use BM25 sparse embeddings, with the filter condition `table_name == 'chunks' and column_name == 'text_content' and pdf_id == '12345678' and page_number == 1` to restrict the content source and return the top 10 relevant context with the `text` field."
            },
            {
                "example": {
                    "query": "Is there any work about the topic structured RAG?",
                    "collection_name": "text_sentence_transformers_all_minilm_l6_v2",
                    "table_name": "papers",
                    "column_name": "abstract",
                    "output_fields": [
                        "text",
                        "primary_key"
                    ]
                },
                "explanation": "Perform a similarity search on all cell values from the `abstract` column of the `papers` table in the relational database, using the MiniLM-L6-v2 setence transformer embeddings. By default, the top 5 most relevant entries will be returned based on vector similarity. Each result includes the abstract text and the corresponding primary key from the `papers` table to uniquely identify the cell."
            }
        ]
    },
    "RetrieveFromDatabaseWithVectorFilter": {
        "action_type": "RetrieveFromDatabaseWithVectorFilter",
        "description": "This is a hybrid two-stage action. First, given a query text, retrieve relevant context from the Milvus vectorstore. The primary keys of the retrieved entries will be stored in a temporary table named `filtered_primary_keys` in the DuckDB database. The column names in this temporary table are the same as the primary key columns in the original table. Second, perform a SQL query to retrieve the desired information from the DuckDB database. The SQL query can use the `filtered_primary_keys` table to filter the results.",
        "observation": "The observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If something goes wrong, we will return the error message.",
        "parameters": {
            "query": {
                "type": "str",
                "required": true,
                "description": "The query text will be encoded and used to search for relevant context. You should try to express the search intention in a more clear and structured way."
            },
            "collection_name": {
                "type": "str",
                "required": true,
                "description": "The name of the collection in the Milvus vectorstore to search for relevant context. Please ensure the name comes from existing collection names."
            },
            "table_name": {
                "type": "str",
                "required": true,
                "description": "This parameter will be used in both two stages. In the first stage, it is used to narrow the search space in the Milvus vectorstore. In the second stage, it is used as the target table to return filtered rows from the DuckDB database. Please ensure the name comes from existing table names."
            },
            "column_name": {
                "type": "str",
                "required": true,
                "description": "This paramerter will only be used in the first stage. It is used to narrow the search space in the Milvus vectorstore. Please ensure the name comes from existing column names in the specified `table_name`."
            },
            "filter": {
                "type": "str",
                "required": false,
                "default": "",
                "description": "The filter condition to narrow down the search space in the Milvus vectorstore. Please refer to the syntax of filter conditions. By default, no filter condition. It is suggested to restrict `pdf_id` or `page_number` to refine search results. Note that you do not need to restrict `table_name` and `column_name` since they are already specified in the `table_name` and `column_name` parameters. Thus, if the `filter` parameter is empty, the actual filter condition will be `table_name == 'table_name' and column_name == 'column_name'`."
            },
            "limit": {
                "type": "int",
                "required": false,
                "default": 10000,
                "description": "The number of top-ranked context to retrieve from the Milvus vectorstore in the first stage. Please set it to a positive integer to limit the number of returned results."
            },
            "sql": {
                "type": "str",
                "required": true,
                "description": "The SQL query to execute and retrieve results from the DuckDB database. The SQL query can use the `filtered_primary_keys` table to filter the results. Note that `filtered_primary_keys` is a temporary table and will be automatically dropped after the SQL query is executed."
            }
        },
        "use_cases": [
            {
                "example": {
                    "query": "Does any paper discuss LLM-based agent in its abstract on its first page?",
                    "collection_name": "text_bm25_en",
                    "table_name": "paper_content",
                    "column_name": "text_content",
                    "filter": "page_number == 1",
                    "limit": 20000,
                    "sql": "SELECT * FROM paper_content NATURAL JOIN filtered_primary_keys WHERE content_type = 'abstract'"
                },
                "explanation": "First, search the entire collection `text_bm25_en`, which use BM25 sparse embeddings, with the filter condition `table_name == 'paper_content' and column_name == 'text_content' and page_number == 1` to restrict the content source and return the top 20000 relevant context. The primary keys of the retrieved entries will be stored in a temporary table named `filtered_primary_keys` in the DuckDB database. Second, perform a SQL query to retrieve the abstract information from the `paper_content` table in the DuckDB database. The SQL query uses the `filtered_primary_keys` table to only retain the abstracts relevant to \"LLM-based agent\"."
            },
            {
                "example": {
                    "query": "Is there any work about the topic structured RAG?",
                    "collection_name": "text_sentence_transformers_all_minilm_l6_v2",
                    "table_name": "papers",
                    "column_name": "abstract",
                    "sql": "SELECT title, authors, year, abstract FROM papers NATURAL JOIN filtered_primary_keys"
                },
                "explanation": "First, perform a similarity search on all cell values from the `abstract` column of the `papers` table in the Milvus vectorstore, using the MiniLM-L6-v2 setence transformer embeddings. By default, the top 10000 most relevant entries will be returned based on vector similarity. The primary keys of the retrieved entries will be stored in a temporary table named `filtered_primary_keys` in the DuckDB database. Second, perform a SQL query to retrieve the title, authors, year, and abstract information from the `papers` table in the DuckDB database. The SQL query uses the `filtered_primary_keys` table to only retain the papers relevant to \"structured RAG\"."
            }
        ]
    },
    "RetrieveFromVectorstoreWithSQLFilter": {
        "action_type": "RetrieveFromVectorstoreWithSQLFilter",
        "description": "This is a hybrid two-stage action. First, given a SQL program, retrieve SQL execution results from the DuckDB database which only return filtered primary key values of the specified `table_name`. Second, based on the retrieved primary key values (as extra `filter` condition), perform a vector-based similarity search to retrieve the most relevant entries in the Milvus vectorstore.",
        "observation": "The observation space is the retrieved top-ranked entries from the Milvus vectorstore in the second stage based on all input parameters.",
        "parameters": {
            "sql": {
                "type": "str",
                "required": true,
                "description": "This SQL query is used in the first stage to retrieve the primary key values from the DuckDB database. The executed SQL should only return the primary key values of the specified `table_name` below (any other columns are forbidden). And we will automatically use the filtered primary key values as extra `filter` condition in the second stage."
            },
            "query": {
                "type": "str",
                "required": true,
                "description": "The query text will be encoded and used to search for relevant context in the second stage from the Milvus vectorstore. You should try to express the search intention in a more clear and structured way."
            },
            "collection_name": {
                "type": "str",
                "required": true,
                "description": "The name of the collection in the Milvus vectorstore to search for relevant context after SQL filtering. Please ensure the name comes from existing collection names."
            },
            "table_name": {
                "type": "str",
                "required": true,
                "description": "This parameter specifies which table in the DuckDB database the returned primary key values are from during SQL execution in the first stage. It also restricts the search space of the Milvus vectorstore in the second stage, that is the `table_name` field for each data entry."
            },
            "column_name": {
                "type": "str",
                "required": true,
                "description": "This paramerter only restricts the search space of the Milvus vectorstore in the second stage, that is the `column_name` field for each data entry. Please ensure that the `column_name` value exists and is encodable under `table_name`."
            },
            "filter": {
                "type": "str",
                "required": false,
                "default": "",
                "description": "Extra filter condition to further narrow down the search space in the second stage. Please refer to the syntax of filter conditions of Milvus vectorstore. The returned primary key values from the `sql`, the specified `table_name` value, and the specified `column_name` value will be automatically included, even if this paramater is empty. You can also restrict `pdf_id` or `page_number` to further refine search results using this field."
            },
            "limit": {
                "type": "int",
                "required": false,
                "default": 5,
                "description": "The number of top-ranked context from the Milvus vectorstore to return in the second stage. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated."
            },
            "output_fields": {
                "type": "List[str]",
                "required": false,
                "default": ["text"],
                "description": "The fields to return in the output. By default, the `text` field will be returned for text type collections if this field is empty. And the `id` and `distance/score` for each retrieved entry will also be returned."
            }
        },
        "use_cases": [
            {
                "example": {
                    "sql": "SELECT chunk_id FROM chunks WHERE ref_paper_id IN (SELECT DISTINCT paper_id FROM meta_data WHERE year = 2021);",
                    "query": "Is there any work about structured retrieval in year 2021?",
                    "collection_name": "text_bm25_en",
                    "table_name": "chunks",
                    "column_name": "text_content",
                    "output_fields": [
                        "text",
                        "pdf_id"
                    ]
                },
                "explanation": "Find the chunked text from Milvus vectorstore relevant to 'structured retrieval' with the SQL filter to restrict the `year` attribute of papers. Note that, `chunk_id` should be the primary key column of table `chunks`, and `text_content` is the encodable column under this table. Indeed, the complete filter should be like \"table_name == 'chunks' and column_name == 'text_content' and primary_key in [... list of chunk_id from SQL execution ...]\". Return the top-ranked chunk texts (use the default `limit` value) as well as the pdf_id field for further processing (`pdf_id` is a common field for each entry in the vectorstore schema)."
            },
            {
                "example": {
                    "sql": "SELECT section_id FROM sections WHERE ref_paper_id IN (SELECT paper_id FROM metadata WHERE year = 2024 and conference = 'ACL');",
                    "query": "Find me the papers that make some contribution in refining PPO algorithm in ACL 2024.",
                    "collection_name": "text_sentence_transformers_all_minilm_l6_v2",
                    "table_name": "sections",
                    "column_name": "abstract",
                    "limit": 10,
                    "output_fields": [
                        "text",
                        "pdf_id"
                    ]
                },
                "explanation": "The contributions of papers should be mentioned in the abstract part. This action retrieves the top 10 scored abstract text with their pdf ids (note that `pdf_id` is a common field for each entry in the vectorstore schema). In this case, for table `sections` in the DuckDB, there should be two columns `abstract` and `section_id` with `section_id` being the primary key. And the `sql` filter is used to restrict the `year` and `conference` attributes of papers. The complete filter should be like \"table_name == 'sections' and column_name == 'abstract' and primary_key in [... list of section_id from SQL execution ...]\"."
            }
        ]
    },
    "CalculateExpr": {
        "action_type": "CalculateExpr",
        "description": "Calculate the expression and return the result. The expression should be a Python-style arithmetic expression that can be correctly processed by `eval()`.",
        "observation": "The observation space is the result of the expression calculation. You do not need to worry about the actual calculation, we will perform it for you. If the calculation failed, we will return the error message.",
        "parameters": {
            "expr": {
                "type": "str",
                "required": true,
                "description": "The expression to calculate."
            }
        },
        "use_cases": [
            {
                "example": {
                    "expr": "2 + 3 * 4"
                },
                "explanation": "Calculate the expression 2 + 3 * 4."
            }
        ]
    },
    "ViewImage": {
        "action_type": "ViewImage",
        "description": "You can retrieve the visual information of the paper by taking this action. Please provide the paper id, the page number, and the optional bounding box.",
        "observation": "The observation space is the image that you want to view. We will show you the image according to your parameters. The error message will be shown if there is any problem with the image retrieval.",
        "parameters": {
            "paper_id": {
                "type": "str",
                "required": true,
                "description": "The paper id to retrieve the image."
            },
            "page_number": {
                "type": "int",
                "required": true,
                "description": "The page number (starting from 1) of the paper to retrieve the image."
            },
            "bounding_box": {
                "type": "List[float]",
                "required": false,
                "default": [],
                "description": "The bounding box of the image to retrieve. The format is [x_min, y_min, delta_x, delta_y]. The complete page will be retrieved if not provided."
            }
        },
        "use_cases": [
            {
                "example": {
                    "paper_id": "12345678",
                    "page_number": 3,
                    "bounding_box": []
                },
                "explanation": "Retrieve the image of the third page of the paper with id 12345678."
            },
            {
                "example": {
                    "paper_id": "12345678",
                    "page_number": 5,
                    "bounding_box": [
                        51.1,
                        204.3,
                        333.0,
                        13.8
                    ]
                },
                "explanation": "Retrieve the image of the fifth page of the paper with id 12345678, with a bounding box of [51.1, 204.3, 333.0, 13.8]."
            }
        ]
    },
    "GenerateAnswer": {
        "action_type": "GenerateAnswer",
        "description": "When you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.",
        "observation": "There is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.",
        "parameters": {
            "answer": {
                "type": "Any",
                "required": true,
                "description": "The final answer to the user question. Please adhere to the answer format for the current question."
            }
        },
        "use_cases": [
            {
                "example": {
                    "answer": 42
                },
                "explanation": "The answer to the user question is 42."
            },
            {
                "example": {
                    "answer": [
                        "Results",
                        "Discussion"
                    ]
                },
                "explanation": "The answer to the user question is a list of strings: ['Results', 'Discussion']."
            }
        ]
    }
}