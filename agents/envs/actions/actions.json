{
    "RetrieveFromDatabase": {
        "action_type": "RetrieveFromDatabase",
        "description": "Generate an SQL query to retrieve the desired information from the DuckDB database. Please refer to the concrete database schema to produce a valid and executable SQL.",
        "observation": "The observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If the SQL failed to execute, we will return the error message. Extremely long SQL output will be truncated.",
        "parameters": {
            "sql": {
                "type": "str",
                "required": true,
                "description": "The concrete DuckDB SQL query to execute and retrieve results."
            }
        },
        "use_cases": [
            {
                "example": {
                    "sql": "SELECT COUNT(DISTINCT pdf_id) FROM meta_data;"
                },
                "explanation": "Get the total number of unique PDFs in the database."
            }
        ]
    },
    "RetrieveFromVectorstore": {
        "action_type": "RetrieveFromVectorstore",
        "description": "Given a query text, retrieve relevant context from the Milvus vectorstore. Please refer to the schema of different collections and fields for each stored data entry.",
        "observation": "The observation space is the retrieved top-ranked entries from the Milvus vectorstore based on input parameters.",
        "parameters": {
            "query": {
                "type": "str",
                "required": true,
                "description": "The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement."
            },
            "collection_name": {
                "type": "str",
                "required": true,
                "description": "The name of the collection in the Milvus vectorstore to search for relevant context. Please ensure the name comes from existing collection names."
            },
            "filter": {
                "type": "str",
                "required": false,
                "default": "",
                "description": "The filter condition to narrow down the search space. Please refer to the syntax of filter conditions. By default, no filter condition. It is suggested to restrict `table_name`, `column_name`, `primary_key`, `pdf_id`, or `page_number` to refine search results."
            },
            "limit": {
                "type": "int",
                "required": false,
                "default": 5,
                "description": "The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated."
            },
            "output_fields": {
                "type": "List[str]",
                "required": false,
                "default": [
                    "text"
                ],
                "description": "The fields to return in the output. By default, the `text` field will be returned for text type collections. And the `id` and `distance/score` for each retrieved entry will be returned even if this parameter is empty."
            }
        },
        "use_cases": [
            {
                "example": {
                    "query": "Does this paper discuss LLM-based agent on its first page? (paper id is '12345678')",
                    "collection_name": "text_bm25_en",
                    "limit": 10,
                    "filter": "pdf_id == '12345678' and page_number == 1",
                    "output_fields": [
                        "text"
                    ]
                },
                "explanation": "Search the entire collection `text_bm25_en`, which use BM25 sparse embeddings, with two conjunctive filter conditions to restrict the content source and return the top 10 relevant context with the `text` field."
            },
            {
                "example": {
                    "query": "Is there any work about the topic structured RAG?",
                    "collection_name": "text_sentence_transformers_all_minilm_l6_v2",
                    "filter": "table_name == 'papers' && column_name == 'abstract'",
                    "output_fields": [
                        "text",
                        "primary_key"
                    ]
                },
                "explanation": "Perform a similarity search on all cell values from the `abstract` column of the `papers` table in the relational database, using the MiniLM-L6-v2 setence transformer embeddings. By default, the top 5 most relevant entries will be returned based on vector similarity. Each result includes the abstract text and the corresponding primary key from the `papers` table to uniquely identify the cell."
            }
        ]
    },
    "RetrieveFromDatabaseWithVectorFilter": {
        "action_type": "RetrieveFromDatabaseWithVectorFilter",
        "description": "This is a hybrid action. First, given a query text, retrieve relevant context from the Milvus vectorstore. Second, based on the retrieved context, perform a SQL query to retrieve the corresponding information from the DuckDB database.",
        "observation": "The observation space is the execution result of the SQL query. You do not need to worry about the actual execution, we will perform it for you. If something goes wrong, we will return the error message. Extremely long SQL output will be truncated.",
        "parameters": {
            "query": {
                "type": "str",
                "required": true,
                "description": "The query text will be encoded and used to search for relevant context. You can rephrase the original user question to obtain a more clear and structured query requirement."
            },
            "collection_name": {
                "type": "str",
                "required": true,
                "description": "The name of the collection in the Milvus vectorstore to search for relevant context. Please ensure the name comes from existing collection names."
            },
            "table_name": {
                "type": "str",
                "required": true,
                "description": "The name of the table in the DuckDB database to retrieve the corresponding information. Please ensure the name comes from existing table names."
            },
            "filter": {
                "type": "str",
                "required": false,
                "default": "",
                "description": "The filter condition to narrow down the search space. Please refer to the syntax of filter conditions. By default, no filter condition. It is suggested to restrict `column_name`, `pdf_id`, or `page_number` to refine search results. Note that you do not need to restrict `table_name` since it is already specified in the `table_name` parameter."
            },
            "limit": {
                "type": "int",
                "required": false,
                "default": 5,
                "description": "The number of top-ranked context to retrieve. Please set it to a positive integer to limit the number of returned results. Extremely large limit values may be truncated."
            }
        },
        "use_cases": [
            {
                "example": {
                    "query": "Does this paper discuss LLM-based agent on its first page? (paper id is '12345678')",
                    "collection_name": "text_bm25_en",
                    "table_name": "content",
                    "filter": "pdf_id == '12345678' and page_number == 1",
                    "limit": 10
                },
                "explanation": "Search the entire collection `text_bm25_en`, which use BM25 sparse embeddings, with two conjunctive filter conditions to restrict the content source and return the top 10 relevant context. Then, for those retrieved context, perform a SQL query to retrieve the corresponding information from the `content` table in the DuckDB database."
            },
            {
                "example": {
                    "query": "Is there any work about the topic structured RAG?",
                    "collection_name": "text_sentence_transformers_all_minilm_l6_v2",
                    "table_name": "papers",
                    "filter": "column_name == 'abstract'"
                },
                "explanation": "Perform a similarity search on all cell values from the `abstract` column of the `papers` table in the relational database, using the MiniLM-L6-v2 setence transformer embeddings. By default, the top 5 most relevant entries will be returned based on vector similarity. For those retrieved entry, perform a SQL query to retrieve the corresponding information from the `papers` table in the DuckDB database."
            }
        ]
    },
    "CalculateExpr": {
        "action_type": "CalculateExpr",
        "description": "Calculate the expression and return the result. The expression should be a Python-style arithmetic expression that can be correctly processed by `eval()`.",
        "observation": "The observation space is the result of the expression calculation. You do not need to worry about the actual calculation, we will perform it for you. If the calculation failed, we will return the error message.",
        "parameters": {
            "expr": {
                "type": "str",
                "required": true,
                "description": "The expression to calculate."
            }
        },
        "use_cases": [
            {
                "example": {
                    "expr": "2 + 3 * 4"
                },
                "explanation": "Calculate the expression 2 + 3 * 4."
            }
        ]
    },
    "ViewImage": {
        "action_type": "ViewImage",
        "description": "You can retrieve the visual information of the paper by taking this action. Please provide the paper id, the page number, and the optional bounding box.",
        "observation": "The observation space is the image that you want to view. We will show you the image according to your parameters. The error message will be shown if there is any problem with the image retrieval.",
        "parameters": {
            "paper_id": {
                "type": "str",
                "required": true,
                "description": "The paper id to retrieve the image."
            },
            "page_number": {
                "type": "int",
                "required": true,
                "description": "The page number (starting from 1) of the paper to retrieve the image."
            },
            "bounding_box": {
                "type": "List[float]",
                "required": false,
                "default": [],
                "description": "The bounding box of the image to retrieve. The format is [x_min, y_min, delta_x, delta_y]. The complete page will be retrieved if not provided."
            }
        },
        "use_cases": [
            {
                "example": {
                    "paper_id": "12345678",
                    "page_number": 3,
                    "bounding_box": []
                },
                "explanation": "Retrieve the image of the third page of the paper with id 12345678."
            },
            {
                "example": {
                    "paper_id": "12345678",
                    "page_number": 5,
                    "bounding_box": [
                        51.1,
                        204.3,
                        333.0,
                        13.8
                    ]
                },
                "explanation": "Retrieve the image of the fifth page of the paper with id 12345678, with a bounding box of [51.1, 204.3, 333.0, 13.8]."
            }
        ]
    },
    "GenerateAnswer": {
        "action_type": "GenerateAnswer",
        "description": "When you take this action, the retrieved results suffice to answer the user question. PLEASE STRICTLY ADHERE TO THE ANSWER FORMAT FOR THE CURRENT QUESTION.",
        "observation": "There is no observation for this terminal action, since it indicates the completion of the task and end of the interaction.",
        "parameters": {
            "answer": {
                "type": "Any",
                "required": true,
                "description": "The final answer to the user question. Please adhere to the answer format for the current question."
            }
        },
        "use_cases": [
            {
                "example": {
                    "answer": 42
                },
                "explanation": "The answer to the user question is 42."
            },
            {
                "example": {
                    "answer": [
                        "Results",
                        "Discussion"
                    ]
                },
                "explanation": "The answer to the user question is a list of strings: ['Results', 'Discussion']."
            }
        ]
    }
}