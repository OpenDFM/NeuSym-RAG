{
    "uuid": "0177b93c-89c2-53ae-980e-3174027e3baf",
    "title": "Iterative Refinement of Project-Level Code Context for Precise Code Generation with Compiler Feedback",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2024",
    "bibtex": "@inproceedings{bi-etal-2024-iterative,\n    title = \"Iterative Refinement of Project-Level Code Context for Precise Code Generation with Compiler Feedback\",\n    author = \"Bi, Zhangqian  and\n      Wan, Yao  and\n      Wang, Zheng  and\n      Zhang, Hongyu  and\n      Guan, Batu  and\n      Lu, Fangxin  and\n      Zhang, Zili  and\n      Sui, Yulei  and\n      Jin, Hai  and\n      Shi, Xuanhua\",\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2024\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.findings-acl.138\",\n    doi = \"10.18653/v1/2024.findings-acl.138\",\n    pages = \"2336--2353\",\n    abstract = \"Large Language Models (LLMs) have shown remarkable progress in automated code generation. Yet, LLM-generated code may contain errors in API usage, class, data structure, or missing project-specific information. As much of this project-specific context cannot fit into the prompts of LLMs, we must find ways to allow the model to explore the project-level code context. We present CoCoGen, a new code generation approach that uses compiler feedback to improve the LLM-generated code. CoCoGen first leverages static analysis to identify mismatches between the generated code and the project{'}s context. It then iteratively aligns and fixes the identified errors using information extracted from the code repository. We integrate CoCoGen with two representative LLMs, i.e., GPT-3.5-Turbo and Code Llama (13B), and apply it to Python code generation. Experimental results show that CoCoGen significantly improves the vanilla LLMs by over 80{\\%} in generating code dependent on the project context and consistently outperforms the existing retrieval-based code generation baselines.\",\n}\n",
    "authors": [
        "Zhangqian Bi",
        "Yao Wan",
        "Zheng Wang",
        "Hongyu Zhang",
        "Batu Guan",
        "Fangxin Lu",
        "Zili Zhang",
        "Yulei Sui",
        "Hai Jin",
        "Xuanhua Shi"
    ],
    "pdf_url": "https://aclanthology.org/2024.findings-acl.138.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/0177b93c-89c2-53ae-980e-3174027e3baf.pdf",
    "abstract": "Large Language Models (LLMs) have shown remarkable progress in automated code generation. Yet, LLM-generated code may contain errors in API usage, class, data structure, or missing project-specific information. As much of this project-specific context cannot fit into the prompts of LLMs, we must find ways to allow the model to explore the project-level code context. We present CoCoGen, a new code generation approach that uses compiler feedback to improve the LLM-generated code. CoCoGen first leverages static analysis to identify mismatches between the generated code and the projectâ€™s context. It then iteratively aligns and fixes the identified errors using information extracted from the code repository. We integrate CoCoGen with two representative LLMs, i.e., GPT-3.5-Turbo and Code Llama (13B), and apply it to Python code generation. Experimental results show that CoCoGen significantly improves the vanilla LLMs by over 80% in generating code dependent on the project context and consistently outperforms the existing retrieval-based code generation baselines.",
    "num_pages": 18
}