{
    "uuid": "1afbaf4e-8e13-5bfd-86e0-d16456c95886",
    "title": "On the Effect of (Near) Duplicate Subwords in Language Modelling",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2024",
    "bibtex": "@inproceedings{schafer-etal-2024-effect,\n    title = \"On the Effect of (Near) Duplicate Subwords in Language Modelling\",\n    author = {Sch{\\\"a}fer, Anton  and\n      Hofmann, Thomas  and\n      Schlag, Imanol  and\n      Pimentel, Tiago},\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2024\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.findings-acl.571\",\n    doi = \"10.18653/v1/2024.findings-acl.571\",\n    pages = \"9580--9597\",\n    abstract = \"Tokenisation is a core part of language models (LMs). It involves splitting a character sequence into subwords which are assigned random indices before being served to the LM. However, this process{---}while typically lossless{---}may lead to less efficient LM training, because it removes character-level information, thereby making it more difficult to generalise across similar subwords, such as *now* and *Now*. We refer to such subwords as **near duplicates**. In this paper, we study the impact of near duplicate subwords on LM training efficiency. First, we design an experiment that gives us an upper bound to how much we should expect a model to improve if we could perfectly generalise across near duplicates. We do this, by duplicating each token in our LM{'}s vocabulary, creating perfectly equivalent classes of subwords. Experimentally, we find that LMs need roughly 17{\\%} more data when trained in a fully duplicated setting. Second, we investigate the impact of naturally occurring near duplicates on LMs. Here, we see that deduplicating them considerably hurts LM performance; but that this loss in performance can be easily mitigated.\",\n}\n",
    "authors": [
        "Anton Schäfer",
        "Thomas Hofmann",
        "Imanol Schlag",
        "Tiago Pimentel"
    ],
    "pdf_url": "https://aclanthology.org/2024.findings-acl.571.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/1afbaf4e-8e13-5bfd-86e0-d16456c95886.pdf",
    "abstract": "Tokenisation is a core part of language models (LMs). It involves splitting a character sequence into subwords which are assigned random indices before being served to the LM. However, this process—while typically lossless—may lead to less efficient LM training, because it removes character-level information, thereby making it more difficult to generalise across similar subwords, such as *now* and *Now*. We refer to such subwords as **near duplicates**. In this paper, we study the impact of near duplicate subwords on LM training efficiency. First, we design an experiment that gives us an upper bound to how much we should expect a model to improve if we could perfectly generalise across near duplicates. We do this, by duplicating each token in our LM’s vocabulary, creating perfectly equivalent classes of subwords. Experimentally, we find that LMs need roughly 17% more data when trained in a fully duplicated setting. Second, we investigate the impact of naturally occurring near duplicates on LMs. Here, we see that deduplicating them considerably hurts LM performance; but that this loss in performance can be easily mitigated.",
    "num_pages": 18
}