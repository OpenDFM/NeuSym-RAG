{
    "uuid": "e69ee907-e172-50a3-bfe9-da873597d82d",
    "title": "Know What I donâ€™t Know: Handling Ambiguous and Unknown Questions for Text-to-SQL",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2023,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2023",
    "bibtex": "@inproceedings{wang-etal-2023-know,\n    title = \"Know What {I} don{'}t Know: Handling Ambiguous and Unknown Questions for Text-to-{SQL}\",\n    author = \"Wang, Bing  and\n      Gao, Yan  and\n      Li, Zhoujun  and\n      Lou, Jian-Guang\",\n    editor = \"Rogers, Anna  and\n      Boyd-Graber, Jordan  and\n      Okazaki, Naoaki\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2023\",\n    month = jul,\n    year = \"2023\",\n    address = \"Toronto, Canada\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2023.findings-acl.352\",\n    doi = \"10.18653/v1/2023.findings-acl.352\",\n    pages = \"5701--5714\",\n    abstract = \"The task of text-to-SQL aims to convert a natural language question into its corresponding SQL query within the context of relational tables. Existing text-to-SQL parsers generate a plausible SQL query for an arbitrary user question, thereby failing to correctly handle problematic user questions. To formalize this problem, we conduct a preliminary study on the observed ambiguous and unanswerable cases in text-to-SQL and summarize them into 6 feature categories. Correspondingly, we identify the causes behind each category and propose requirements for handling ambiguous and unanswerable questions. Following this study, we propose a simple yet effective counterfactual example generation approach that automatically produces ambiguous and unanswerable text-to-SQL examples. Furthermore, we propose a weakly supervised DTE (Detecting-Then-Explaining) model for error detection, localization, and explanation. Experimental results show that our model achieves the best result on both real-world examples and generated examples compared with various baselines. We release our data and code at: \\url{https://github.com/wbbeyourself/DTE}.\",\n}\n",
    "authors": [
        "Bing Wang",
        "Yan Gao",
        "Zhoujun Li",
        "Jian-Guang Lou"
    ],
    "pdf_url": "https://aclanthology.org/2023.findings-acl.352.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2023/e69ee907-e172-50a3-bfe9-da873597d82d.pdf",
    "abstract": "The task of text-to-SQL aims to convert a natural language question into its corresponding SQL query within the context of relational tables. Existing text-to-SQL parsers generate a plausible SQL query for an arbitrary user question, thereby failing to correctly handle problematic user questions. To formalize this problem, we conduct a preliminary study on the observed ambiguous and unanswerable cases in text-to-SQL and summarize them into 6 feature categories. Correspondingly, we identify the causes behind each category and propose requirements for handling ambiguous and unanswerable questions. Following this study, we propose a simple yet effective counterfactual example generation approach that automatically produces ambiguous and unanswerable text-to-SQL examples. Furthermore, we propose a weakly supervised DTE (Detecting-Then-Explaining) model for error detection, localization, and explanation. Experimental results show that our model achieves the best result on both real-world examples and generated examples compared with various baselines. We release our data and code at: https://github.com/wbbeyourself/DTE.",
    "num_pages": 14
}