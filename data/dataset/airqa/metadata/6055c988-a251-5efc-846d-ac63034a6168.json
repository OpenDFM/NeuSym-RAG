{
    "uuid": "6055c988-a251-5efc-846d-ac63034a6168",
    "title": "Prompt Engineering a Prompt Engineer",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2024",
    "bibtex": "@inproceedings{ye-etal-2024-prompt,\n    title = \"Prompt Engineering a Prompt Engineer\",\n    author = \"Ye, Qinyuan  and\n      Ahmed, Mohamed  and\n      Pryzant, Reid  and\n      Khani, Fereshte\",\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2024\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.findings-acl.21\",\n    doi = \"10.18653/v1/2024.findings-acl.21\",\n    pages = \"355--385\",\n    abstract = \"Prompt engineering is a challenging yet crucial task for optimizing the performance of large language models on customized tasks. It requires complex reasoning to examine the model{'}s errors, hypothesize what is missing or misleading in the current prompt, and communicate the task with clarity. While recent works indicate that large language models can be meta-prompted to perform automatic prompt engineering, we argue that their potential is limited due to insufficient guidance for complex reasoning in the meta-prompt. We fill this gap by infusing into the meta-prompt three key components: detailed descriptions, context specification, and a step-by-step reasoning template. The resulting method, named PE2, showcases remarkable versatility across diverse language tasks. It finds prompts that outperform {``}let{'}s think step by step{''} by 6.3{\\%} on MultiArith and 3.1{\\%} on GSM8K, and outperforms competitive baselines on counterfactual tasks by 6.9{\\%}. Further, we show that PE2 can make targeted prompt edits, rectify erroneous prompts, and induce multi-step plans for complex tasks.\",\n}\n",
    "authors": [
        "Qinyuan Ye",
        "Mohamed Ahmed",
        "Reid Pryzant",
        "Fereshte Khani"
    ],
    "pdf_url": "https://aclanthology.org/2024.findings-acl.21.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/6055c988-a251-5efc-846d-ac63034a6168.pdf",
    "abstract": "Prompt engineering is a challenging yet crucial task for optimizing the performance of large language models on customized tasks. It requires complex reasoning to examine the model’s errors, hypothesize what is missing or misleading in the current prompt, and communicate the task with clarity. While recent works indicate that large language models can be meta-prompted to perform automatic prompt engineering, we argue that their potential is limited due to insufficient guidance for complex reasoning in the meta-prompt. We fill this gap by infusing into the meta-prompt three key components: detailed descriptions, context specification, and a step-by-step reasoning template. The resulting method, named PE2, showcases remarkable versatility across diverse language tasks. It finds prompts that outperform “let’s think step by step” by 6.3% on MultiArith and 3.1% on GSM8K, and outperforms competitive baselines on counterfactual tasks by 6.9%. Further, we show that PE2 can make targeted prompt edits, rectify erroneous prompts, and induce multi-step plans for complex tasks.",
    "num_pages": 31
}