{
    "uuid": "94ecc296-c002-5d10-a075-d6c6f0a51fe4",
    "title": "UniCoder: Scaling Code Large Language Model via Universal Code",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)",
    "bibtex": "@inproceedings{sun-etal-2024-unicoder,\n    title = \"{U}ni{C}oder: Scaling Code Large Language Model via Universal Code\",\n    author = \"Sun, Tao  and\n      Chai, Linzheng  and\n      Yang, Jian  and\n      Yin, Yuwei  and\n      Guo, Hongcheng  and\n      Liu, Jiaheng  and\n      Wang, Bing  and\n      Yang, Liqun  and\n      Li, Zhoujun\",\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.acl-long.100\",\n    doi = \"10.18653/v1/2024.acl-long.100\",\n    pages = \"1812--1824\",\n    abstract = \"Intermediate reasoning or acting steps have successfully improved large language models (LLMs) for handling various downstream natural language processing (NLP) tasks.When applying LLMs for code generation, recent works mainly focus on directing the models to articulate intermediate natural-language reasoning steps, as in chain-of-thought (CoT) prompting, and then output code with the natural language or other structured intermediate steps. However, such output is not suitable for code translation or generation tasks since the standard CoT has different logical structures and forms of expression with the code. In this work, we introduce the universal code (UniCode) as the intermediate representation. It is a description of algorithm steps using a mix of conventions of programming languages, such as assignment operator, conditional operator, and loop. Hence, we collect an instruction dataset UniCoder-Instruct to train our model UniCoder on multi-task learning objectives. UniCoder-Instruct comprises natural-language questions, code solutions, and the corresponding universal code. The alignment between the intermediate universal code representation and the final code solution significantly improves the quality of the generated code. The experimental results demonstrate that UniCoder with the universal code significantly outperforms the previous prompting methods by a large margin, showcasing the effectiveness of the structural clues in pseudo-code.\",\n}\n",
    "authors": [
        "Tao Sun",
        "Linzheng Chai",
        "Jian Yang",
        "Yuwei Yin",
        "Hongcheng Guo",
        "Jiaheng Liu",
        "Bing Wang",
        "Liqun Yang",
        "Zhoujun Li"
    ],
    "pdf_url": "https://aclanthology.org/2024.acl-long.100.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/94ecc296-c002-5d10-a075-d6c6f0a51fe4.pdf",
    "abstract": "Intermediate reasoning or acting steps have successfully improved large language models (LLMs) for handling various downstream natural language processing (NLP) tasks.When applying LLMs for code generation, recent works mainly focus on directing the models to articulate intermediate natural-language reasoning steps, as in chain-of-thought (CoT) prompting, and then output code with the natural language or other structured intermediate steps. However, such output is not suitable for code translation or generation tasks since the standard CoT has different logical structures and forms of expression with the code. In this work, we introduce the universal code (UniCode) as the intermediate representation. It is a description of algorithm steps using a mix of conventions of programming languages, such as assignment operator, conditional operator, and loop. Hence, we collect an instruction dataset UniCoder-Instruct to train our model UniCoder on multi-task learning objectives. UniCoder-Instruct comprises natural-language questions, code solutions, and the corresponding universal code. The alignment between the intermediate universal code representation and the final code solution significantly improves the quality of the generated code. The experimental results demonstrate that UniCoder with the universal code significantly outperforms the previous prompting methods by a large margin, showcasing the effectiveness of the structural clues in pseudo-code.",
    "num_pages": 13
}