{
    "uuid": "c770f264-fc75-5e1d-808a-0370f8e1d395",
    "title": "ChatDev: Communicative Agents for Software Development",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)",
    "bibtex": "@inproceedings{qian-etal-2024-chatdev,\n    title = \"{C}hat{D}ev: Communicative Agents for Software Development\",\n    author = \"Qian, Chen  and\n      Liu, Wei  and\n      Liu, Hongzhang  and\n      Chen, Nuo  and\n      Dang, Yufan  and\n      Li, Jiahao  and\n      Yang, Cheng  and\n      Chen, Weize  and\n      Su, Yusheng  and\n      Cong, Xin  and\n      Xu, Juyuan  and\n      Li, Dahai  and\n      Liu, Zhiyuan  and\n      Sun, Maosong\",\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.acl-long.810\",\n    doi = \"10.18653/v1/2024.acl-long.810\",\n    pages = \"15174--15186\",\n    abstract = \"Software development is a complex task that necessitates cooperation among multiple members with diverse skills. Numerous studies used deep learning to improve specific phases in a waterfall model, such as design, coding, and testing. However, the deep learning model in each phase requires unique designs, leading to technical inconsistencies across various phases, which results in a fragmented and ineffective development process. In this paper, we introduce ChatDev, a chat-powered software development framework in which specialized agents driven by large language models (LLMs) are guided in what to communicate (via chat chain) and how to communicate (via communicative dehallucination). These agents actively contribute to the design, coding, and testing phases through unified language-based communication, with solutions derived from their multi-turn dialogues. We found their utilization of natural language is advantageous for system design, and communicating in programming language proves helpful in debugging. This paradigm demonstrates how linguistic communication facilitates multi-agent collaboration, establishing language as a unifying bridge for autonomous task-solving among LLM agents. The code and data are available at https://github.com/OpenBMB/ChatDev.\",\n}\n",
    "authors": [
        "Chen Qian",
        "Wei Liu",
        "Hongzhang Liu",
        "Nuo Chen",
        "Yufan Dang",
        "Jiahao Li",
        "Cheng Yang",
        "Weize Chen",
        "Yusheng Su",
        "Xin Cong",
        "Juyuan Xu",
        "Dahai Li",
        "Zhiyuan Liu",
        "Maosong Sun"
    ],
    "pdf_url": "https://aclanthology.org/2024.acl-long.810.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/c770f264-fc75-5e1d-808a-0370f8e1d395.pdf",
    "abstract": "Software development is a complex task that necessitates cooperation among multiple members with diverse skills. Numerous studies used deep learning to improve specific phases in a waterfall model, such as design, coding, and testing. However, the deep learning model in each phase requires unique designs, leading to technical inconsistencies across various phases, which results in a fragmented and ineffective development process. In this paper, we introduce ChatDev, a chat-powered software development framework in which specialized agents driven by large language models (LLMs) are guided in what to communicate (via chat chain) and how to communicate (via communicative dehallucination). These agents actively contribute to the design, coding, and testing phases through unified language-based communication, with solutions derived from their multi-turn dialogues. We found their utilization of natural language is advantageous for system design, and communicating in programming language proves helpful in debugging. This paradigm demonstrates how linguistic communication facilitates multi-agent collaboration, establishing language as a unifying bridge for autonomous task-solving among LLM agents. The code and data are available at https://github.com/OpenBMB/ChatDev.",
    "num_pages": 13
}