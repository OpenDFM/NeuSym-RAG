{
    "uuid": "546ce277-7a9d-5c6c-8b0e-7bcd198d0f8e",
    "title": "Text2DB: Integration-Aware Information Extraction with Large Language Model Agents",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2024",
    "bibtex": "@inproceedings{jiao-etal-2024-text2db,\n    title = \"{T}ext2{DB}: Integration-Aware Information Extraction with Large Language Model Agents\",\n    author = \"Jiao, Yizhu  and\n      Li, Sha  and\n      Zhou, Sizhe  and\n      Ji, Heng  and\n      Han, Jiawei\",\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2024\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.findings-acl.12\",\n    doi = \"10.18653/v1/2024.findings-acl.12\",\n    pages = \"185--205\",\n    abstract = \"The task of information extraction (IE) is to extract structured knowledge from text. However, it is often not straightforward to utilize IE output due to the mismatch between the IE ontology and the downstream application needs. We propose a new formulation of IE, Text2DB, that emphasizes the integration of IE output and the target database (or knowledge base). Given a user instruction, a document set, and a database, our task requires the model to update the database with values from the document set to satisfy the user instruction. This task requires understanding user instructions for \\textit{what to extract} and adapting to the given DB/KB schema for \\textit{how to extract} on the fly. To evaluate this new task, we introduce a new benchmark featuring common demands such as data infilling, row population, and column addition. In addition, we propose an LLM agent framework OPAL (Observe-Plan-Analyze LLM) which includes an Observer component that interacts with the database, the Planner component that generates a code-based plan with calls to IE models, and the Analyzer component that provides feedback regarding code quality before execution. Experiments show that OPAL can successfully adapt to diverse database schemas by generating different code plans and calling the required IE models. We also highlight difficult cases such as dealing with large databases with complex dependencies and extraction hallucination, which we believe deserve further investigation.\",\n}\n",
    "authors": [
        "Yizhu Jiao",
        "Sha Li",
        "Sizhe Zhou",
        "Heng Ji",
        "Jiawei Han"
    ],
    "pdf_url": "https://aclanthology.org/2024.findings-acl.12.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/546ce277-7a9d-5c6c-8b0e-7bcd198d0f8e.pdf",
    "abstract": "The task of information extraction (IE) is to extract structured knowledge from text. However, it is often not straightforward to utilize IE output due to the mismatch between the IE ontology and the downstream application needs. We propose a new formulation of IE, Text2DB, that emphasizes the integration of IE output and the target database (or knowledge base). Given a user instruction, a document set, and a database, our task requires the model to update the database with values from the document set to satisfy the user instruction. This task requires understanding user instructions for what to extract and adapting to the given DB/KB schema for how to extract on the fly. To evaluate this new task, we introduce a new benchmark featuring common demands such as data infilling, row population, and column addition. In addition, we propose an LLM agent framework OPAL (Observe-Plan-Analyze LLM) which includes an Observer component that interacts with the database, the Planner component that generates a code-based plan with calls to IE models, and the Analyzer component that provides feedback regarding code quality before execution. Experiments show that OPAL can successfully adapt to diverse database schemas by generating different code plans and calling the required IE models. We also highlight difficult cases such as dealing with large databases with complex dependencies and extraction hallucination, which we believe deserve further investigation.",
    "num_pages": 21
}