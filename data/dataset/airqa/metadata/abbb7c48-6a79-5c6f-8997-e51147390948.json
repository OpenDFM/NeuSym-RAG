{
    "uuid": "abbb7c48-6a79-5c6f-8997-e51147390948",
    "title": "Code Execution with Pre-trained Language Models",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2023,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2023",
    "bibtex": "@inproceedings{liu-etal-2023-code,\n    title = \"Code Execution with Pre-trained Language Models\",\n    author = \"Liu, Chenxiao  and\n      Lu, Shuai  and\n      Chen, Weizhu  and\n      Jiang, Daxin  and\n      Svyatkovskiy, Alexey  and\n      Fu, Shengyu  and\n      Sundaresan, Neel  and\n      Duan, Nan\",\n    editor = \"Rogers, Anna  and\n      Boyd-Graber, Jordan  and\n      Okazaki, Naoaki\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2023\",\n    month = jul,\n    year = \"2023\",\n    address = \"Toronto, Canada\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2023.findings-acl.308\",\n    doi = \"10.18653/v1/2023.findings-acl.308\",\n    pages = \"4984--4999\",\n    abstract = \"Code execution is a fundamental aspect of programming language semantics that reflects the exact behavior of the code. However, most pre-trained models for code intelligence ignore the execution trace and only rely on source code and syntactic structures. In this paper, we investigate how well pre-trained models can understand and perform code execution. We develop a mutation-based data augmentation technique to create a large-scale and realistic Python dataset and task for code execution, which challenges existing models such as Codex. We then present CodeExecutor, a Transformer model that leverages code execution pre-training and curriculum learning to enhance its semantic comprehension. We evaluate CodeExecutor on code execution and show its promising performance and limitations. We also demonstrate its potential benefits for code intelligence tasks such as zero-shot code-to-code search and text-to-code generation. Our analysis provides insights into the learning and generalization abilities of pre-trained models for code execution.\",\n}\n",
    "authors": [
        "Chenxiao Liu",
        "Shuai Lu",
        "Weizhu Chen",
        "Daxin Jiang",
        "Alexey Svyatkovskiy",
        "Shengyu Fu",
        "Neel Sundaresan",
        "Nan Duan"
    ],
    "pdf_url": "https://aclanthology.org/2023.findings-acl.308.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2023/abbb7c48-6a79-5c6f-8997-e51147390948.pdf",
    "abstract": "Code execution is a fundamental aspect of programming language semantics that reflects the exact behavior of the code. However, most pre-trained models for code intelligence ignore the execution trace and only rely on source code and syntactic structures. In this paper, we investigate how well pre-trained models can understand and perform code execution. We develop a mutation-based data augmentation technique to create a large-scale and realistic Python dataset and task for code execution, which challenges existing models such as Codex. We then present CodeExecutor, a Transformer model that leverages code execution pre-training and curriculum learning to enhance its semantic comprehension. We evaluate CodeExecutor on code execution and show its promising performance and limitations. We also demonstrate its potential benefits for code intelligence tasks such as zero-shot code-to-code search and text-to-code generation. Our analysis provides insights into the learning and generalization abilities of pre-trained models for code execution.",
    "num_pages": 16
}