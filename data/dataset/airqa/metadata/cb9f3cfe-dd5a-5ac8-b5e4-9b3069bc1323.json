{
    "uuid": "cb9f3cfe-dd5a-5ac8-b5e4-9b3069bc1323",
    "title": "One Embedder, Any Task: Instruction-Finetuned Text Embeddings",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2023,
    "volume": "Findings of the Association for Computational Linguistics: ACL 2023",
    "bibtex": "@inproceedings{su-etal-2023-one,\n    title = \"One Embedder, Any Task: Instruction-Finetuned Text Embeddings\",\n    author = \"Su, Hongjin  and\n      Shi, Weijia  and\n      Kasai, Jungo  and\n      Wang, Yizhong  and\n      Hu, Yushi  and\n      Ostendorf, Mari  and\n      Yih, Wen-tau  and\n      Smith, Noah A.  and\n      Zettlemoyer, Luke  and\n      Yu, Tao\",\n    editor = \"Rogers, Anna  and\n      Boyd-Graber, Jordan  and\n      Okazaki, Naoaki\",\n    booktitle = \"Findings of the Association for Computational Linguistics: ACL 2023\",\n    month = jul,\n    year = \"2023\",\n    address = \"Toronto, Canada\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2023.findings-acl.71\",\n    doi = \"10.18653/v1/2023.findings-acl.71\",\n    pages = \"1102--1121\",\n    abstract = \"We introduce INSTRUCTOR, a new method for computing text embeddings given task instructions: every text input is embedded together with instructions explaining the use case (e.g., task and domain descriptions). Unlike encoders from prior work that are more specialized, INSTRUCTOR is a single embedder that can generate text embeddings tailored to different downstream tasks and domains, without any further training. We first annotate instructions for 330 diverse tasks and train INSTRUCTOR on this multitask mixture with a contrastive loss. We evaluate INSTRUCTOR on 70 embedding evaluation tasks (66 of which are unseen during training), ranging from classification and information retrieval to semantic textual similarity and text generation evaluation. INSTRUCTOR, while having an order of magnitude fewer parameters than the previous best model, achieves state-of-the-art performance, with an average improvement of 3.4{\\%} compared to the previous best results on the 70 diverse datasets. Our analysis suggests that INSTRUCTOR is robust to changes in instructions, and that instruction finetuning mitigates the challenge of training a single model on diverse datasets. Our model, code, and data are available at \\url{https://instructor-embedding.github.io}.\",\n}\n",
    "authors": [
        "Hongjin Su",
        "Weijia Shi",
        "Jungo Kasai",
        "Yizhong Wang",
        "Yushi Hu",
        "Mari Ostendorf",
        "Wen-tau Yih",
        "Noah A. Smith",
        "Luke Zettlemoyer",
        "Tao Yu"
    ],
    "pdf_url": "https://aclanthology.org/2023.findings-acl.71.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2023/cb9f3cfe-dd5a-5ac8-b5e4-9b3069bc1323.pdf",
    "abstract": "We introduce INSTRUCTOR, a new method for computing text embeddings given task instructions: every text input is embedded together with instructions explaining the use case (e.g., task and domain descriptions). Unlike encoders from prior work that are more specialized, INSTRUCTOR is a single embedder that can generate text embeddings tailored to different downstream tasks and domains, without any further training. We first annotate instructions for 330 diverse tasks and train INSTRUCTOR on this multitask mixture with a contrastive loss. We evaluate INSTRUCTOR on 70 embedding evaluation tasks (66 of which are unseen during training), ranging from classification and information retrieval to semantic textual similarity and text generation evaluation. INSTRUCTOR, while having an order of magnitude fewer parameters than the previous best model, achieves state-of-the-art performance, with an average improvement of 3.4% compared to the previous best results on the 70 diverse datasets. Our analysis suggests that INSTRUCTOR is robust to changes in instructions, and that instruction finetuning mitigates the challenge of training a single model on diverse datasets. Our model, code, and data are available at https://instructor-embedding.github.io.",
    "num_pages": 20
}