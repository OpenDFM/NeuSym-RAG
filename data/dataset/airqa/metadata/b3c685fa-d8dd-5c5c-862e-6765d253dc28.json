{
    "uuid": "b3c685fa-d8dd-5c5c-862e-6765d253dc28",
    "title": "VulLibGen: Generating Names of Vulnerability-Affected Packages via a Large Language Model",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2024,
    "volume": "Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)",
    "bibtex": "@inproceedings{chen-etal-2024-vullibgen,\n    title = \"{V}ul{L}ib{G}en: Generating Names of Vulnerability-Affected Packages via a Large Language Model\",\n    author = \"Chen, Tianyu  and\n      Li, Lin  and\n      ZhuLiuchuan, ZhuLiuchuan  and\n      Li, Zongyang  and\n      Liu, Xueqing  and\n      Liang, Guangtai  and\n      Wang, Qianxiang  and\n      Xie, Tao\",\n    editor = \"Ku, Lun-Wei  and\n      Martins, Andre  and\n      Srikumar, Vivek\",\n    booktitle = \"Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = aug,\n    year = \"2024\",\n    address = \"Bangkok, Thailand\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2024.acl-long.527\",\n    doi = \"10.18653/v1/2024.acl-long.527\",\n    pages = \"9767--9780\",\n    abstract = \"Security practitioners maintain vulnerability reports (e.g., GitHub Advisory) to help developers mitigate security risks. An important task for these databases is automatically extracting structured information mentioned in the report, e.g., the affected software packages, to accelerate the defense of the vulnerability ecosystem.However, it is challenging for existing work on affected package identification to achieve high precision. One reason is that all existing work focuses on relatively smaller models, thus they cannot harness the knowledge and semantic capabilities of large language models.To address this limitation, we propose VulLibGen, the first method to use LLM for affected package identification. In contrast to existing work, VulLibGen proposes the novel idea to directly generate the affected package. To improve the precision, VulLibGen employs supervised fine-tuning (SFT), retrieval augmented generation (RAG) and a local search algorithm. The local search algorithm is a novel post-processing algorithm we introduce for reducing the hallucination of the generated packages. Our evaluation results show that VulLibGen has an average precision of 0.806 for identifying vulnerable packages in the four most popular ecosystems in GitHub Advisory (Java, JS, Python, Go) while the best average precision in previous work is 0.721. Additionally, VulLibGen has high value to security practice: we submitted 60 {\\textless}vulnerability, affected package{\\textgreater} pairs to GitHub Advisory (covers four ecosystems) and 34 of them have been accepted and merged.\",\n}\n",
    "authors": [
        "Tianyu Chen",
        "Lin Li",
        "ZhuLiuchuan ZhuLiuchuan",
        "Zongyang Li",
        "Xueqing Liu",
        "Guangtai Liang",
        "Qianxiang Wang",
        "Tao Xie"
    ],
    "pdf_url": "https://aclanthology.org/2024.acl-long.527.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2024/b3c685fa-d8dd-5c5c-862e-6765d253dc28.pdf",
    "abstract": "Security practitioners maintain vulnerability reports (e.g., GitHub Advisory) to help developers mitigate security risks. An important task for these databases is automatically extracting structured information mentioned in the report, e.g., the affected software packages, to accelerate the defense of the vulnerability ecosystem.However, it is challenging for existing work on affected package identification to achieve high precision. One reason is that all existing work focuses on relatively smaller models, thus they cannot harness the knowledge and semantic capabilities of large language models.To address this limitation, we propose VulLibGen, the first method to use LLM for affected package identification. In contrast to existing work, VulLibGen proposes the novel idea to directly generate the affected package. To improve the precision, VulLibGen employs supervised fine-tuning (SFT), retrieval augmented generation (RAG) and a local search algorithm. The local search algorithm is a novel post-processing algorithm we introduce for reducing the hallucination of the generated packages. Our evaluation results show that VulLibGen has an average precision of 0.806 for identifying vulnerable packages in the four most popular ecosystems in GitHub Advisory (Java, JS, Python, Go) while the best average precision in previous work is 0.721. Additionally, VulLibGen has high value to security practice: we submitted 60 <vulnerability, affected package> pairs to GitHub Advisory (covers four ecosystems) and 34 of them have been accepted and merged.",
    "num_pages": 14
}