{
    "uuid": "463e4e50-4462-538b-b6b7-d502dc800237",
    "title": "Plug-and-Play Knowledge Injection for Pre-trained Language Models",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2023,
    "volume": "Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)",
    "bibtex": "@inproceedings{zhang-etal-2023-plug,\n    title = \"Plug-and-Play Knowledge Injection for Pre-trained Language Models\",\n    author = \"Zhang, Zhengyan  and\n      Zeng, Zhiyuan  and\n      Lin, Yankai  and\n      Wang, Huadong  and\n      Ye, Deming  and\n      Xiao, Chaojun  and\n      Han, Xu  and\n      Liu, Zhiyuan  and\n      Li, Peng  and\n      Sun, Maosong  and\n      Zhou, Jie\",\n    editor = \"Rogers, Anna  and\n      Boyd-Graber, Jordan  and\n      Okazaki, Naoaki\",\n    booktitle = \"Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = jul,\n    year = \"2023\",\n    address = \"Toronto, Canada\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2023.acl-long.594\",\n    doi = \"10.18653/v1/2023.acl-long.594\",\n    pages = \"10641--10658\",\n    abstract = \"Injecting external knowledge can improve the performance of pre-trained language models (PLMs) on various downstream NLP tasks. However, massive retraining is required to deploy new knowledge injection methods or knowledge bases for downstream tasks. In this work, we are the first to study how to improve the flexibility and efficiency of knowledge injection by reusing existing downstream models. To this end, we explore a new paradigm \\textit{plug-and-play knowledge injection}, where knowledge bases are injected into frozen existing downstream models by a \\textit{knowledge plugin}. Correspondingly, we propose a plug-and-play injection method \\textit{map-tuning}, which trains a mapping of knowledge embeddings to enrich model inputs with mapped embeddings while keeping model parameters frozen. Experimental results on three knowledge-driven NLP tasks show that existing injection methods are not suitable for the new paradigm, while map-tuning effectively improves the performance of downstream models. Moreover, we show that a frozen downstream model can be well adapted to different domains with different mapping networks of domain knowledge. Our code and models are available at \\url{https://github.com/THUNLP/Knowledge-Plugin}.\",\n}\n",
    "authors": [
        "Zhengyan Zhang",
        "Zhiyuan Zeng",
        "Yankai Lin",
        "Huadong Wang",
        "Deming Ye",
        "Chaojun Xiao",
        "Xu Han",
        "Zhiyuan Liu",
        "Peng Li",
        "Maosong Sun",
        "Jie Zhou"
    ],
    "pdf_url": "https://aclanthology.org/2023.acl-long.594.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2023/463e4e50-4462-538b-b6b7-d502dc800237.pdf",
    "abstract": "Injecting external knowledge can improve the performance of pre-trained language models (PLMs) on various downstream NLP tasks. However, massive retraining is required to deploy new knowledge injection methods or knowledge bases for downstream tasks. In this work, we are the first to study how to improve the flexibility and efficiency of knowledge injection by reusing existing downstream models. To this end, we explore a new paradigm plug-and-play knowledge injection, where knowledge bases are injected into frozen existing downstream models by a knowledge plugin. Correspondingly, we propose a plug-and-play injection method map-tuning, which trains a mapping of knowledge embeddings to enrich model inputs with mapped embeddings while keeping model parameters frozen. Experimental results on three knowledge-driven NLP tasks show that existing injection methods are not suitable for the new paradigm, while map-tuning effectively improves the performance of downstream models. Moreover, we show that a frozen downstream model can be well adapted to different domains with different mapping networks of domain knowledge. Our code and models are available at https://github.com/THUNLP/Knowledge-Plugin.",
    "num_pages": 16
}