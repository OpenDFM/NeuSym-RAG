{
    "uuid": "ec9e8a5e-e50f-5733-baba-ff4636f35060",
    "title": "Recall, Expand, and Multi-Candidate Cross-Encode: Fast and Accurate Ultra-Fine Entity Typing",
    "conference_full": "Annual Meeting of the Association for Computational Linguistics",
    "conference": "ACL",
    "year": 2023,
    "volume": "Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)",
    "bibtex": "@inproceedings{jiang-etal-2023-recall,\n    title = \"Recall, Expand, and Multi-Candidate Cross-Encode: Fast and Accurate Ultra-Fine Entity Typing\",\n    author = \"Jiang, Chengyue  and\n      Hui, Wenyang  and\n      Jiang, Yong  and\n      Wang, Xiaobin  and\n      Xie, Pengjun  and\n      Tu, Kewei\",\n    editor = \"Rogers, Anna  and\n      Boyd-Graber, Jordan  and\n      Okazaki, Naoaki\",\n    booktitle = \"Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers)\",\n    month = jul,\n    year = \"2023\",\n    address = \"Toronto, Canada\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2023.acl-long.648\",\n    doi = \"10.18653/v1/2023.acl-long.648\",\n    pages = \"11597--11609\",\n    abstract = \"Ultra-fine entity typing (UFET) predicts extremely free-formed types (e.g., \\textit{president, politician}) of a given entity mention (e.g., \\textit{Joe Biden}) in context. State-of-the-art (SOTA) methods use the cross-encoder (CE) based architecture. CE concatenates a mention (and its context) with each type and feeds the pair into a pretrained language model (PLM) to score their relevance. It brings deeper interaction between the mention and the type to reach better performance but has to perform $N$ (the type set size) forward passes to infer all the types of a single mention. CE is therefore very slow in inference when the type set is large (e.g., $N=10k$ for UFET). {\\%} Cross-encoder also ignores the correlation between different types.To this end, we propose to perform entity typing in a recall-expand-filter manner. The recall and expansion stages prune the large type set and generate $K$ (typically much smaller than $N$) most relevant type candidates for each mention. At the filter stage, we use a novel model called {pasted macro {`}NAME{'}} to concurrently encode and score all these $K$ candidates in only one forward pass to obtain the final type prediction. We investigate different model options for each stage and conduct extensive experiments to compare each option, experiments show that our method reaches SOTA performance on UFET and is thousands of times faster than the CE-based architecture. We also found our method is very effective in fine-grained (130 types) and coarse-grained (9 types) entity typing. Our code is available at {pasted macro {`}CODE{'}}.\",\n}\n",
    "authors": [
        "Chengyue Jiang",
        "Wenyang Hui",
        "Yong Jiang",
        "Xiaobin Wang",
        "Pengjun Xie",
        "Kewei Tu"
    ],
    "pdf_url": "https://aclanthology.org/2023.acl-long.648.pdf",
    "pdf_path": "data/dataset/airqa/papers/acl2023/ec9e8a5e-e50f-5733-baba-ff4636f35060.pdf",
    "abstract": "Ultra-fine entity typing (UFET) predicts extremely free-formed types (e.g., president, politician) of a given entity mention (e.g., Joe Biden) in context. State-of-the-art (SOTA) methods use the cross-encoder (CE) based architecture. CE concatenates a mention (and its context) with each type and feeds the pair into a pretrained language model (PLM) to score their relevance. It brings deeper interaction between the mention and the type to reach better performance but has to perform N (the type set size) forward passes to infer all the types of a single mention. CE is therefore very slow in inference when the type set is large (e.g., N=10k for UFET). % Cross-encoder also ignores the correlation between different types.To this end, we propose to perform entity typing in a recall-expand-filter manner. The recall and expansion stages prune the large type set and generate K (typically much smaller than N) most relevant type candidates for each mention. At the filter stage, we use a novel model called {pasted macro ‘NAME’} to concurrently encode and score all these K candidates in only one forward pass to obtain the final type prediction. We investigate different model options for each stage and conduct extensive experiments to compare each option, experiments show that our method reaches SOTA performance on UFET and is thousands of times faster than the CE-based architecture. We also found our method is very effective in fine-grained (130 types) and coarse-grained (9 types) entity typing. Our code is available at {pasted macro ‘CODE’}.",
    "num_pages": 13
}