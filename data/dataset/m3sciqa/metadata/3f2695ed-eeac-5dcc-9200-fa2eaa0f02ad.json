{
    "uuid": "3f2695ed-eeac-5dcc-9200-fa2eaa0f02ad",
    "title": "Alpaca: Intermittent Execution without Checkpoints",
    "conference": "arxiv",
    "conference_full": "ArXiv",
    "volume": null,
    "year": 2019,
    "authors": [
        "Kiwan Maeng",
        "Alexei Colin",
        "Brandon Lucia"
    ],
    "pdf_url": "http://arxiv.org/pdf/1909.06951v1",
    "pdf_path": "data\\dataset\\m3sciqa\\papers\\arxiv2019\\3f2695ed-eeac-5dcc-9200-fa2eaa0f02ad.pdf",
    "bibtex": "@misc{maeng2019alpacaintermittentexecutionwithoutcheckpoints,\n    title = {Alpaca: Intermittent Execution without Checkpoints},\n    author = {Kiwan Maeng and Alexei Colin and Brandon Lucia},\n    year = {2019},\n    eprint = {1909.06951},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.DC},\n    url = {http://arxiv.org/abs/1909.06951},\n}",
    "abstract": "The emergence of energy harvesting devices creates the potential for\nbatteryless sensing and computing devices. Such devices operate only\nintermittently, as energy is available, presenting a number of challenges for\nsoftware developers. Programmers face a complex design space requiring\nreasoning about energy, memory consistency, and forward progress. This paper\nintroduces Alpaca, a low-overhead programming model for intermittent computing\non energy-harvesting devices. Alpaca programs are composed of a sequence of\nuser-defined tasks. The Alpaca runtime preserves execution progress at the\ngranularity of a task. The key insight in Alpaca is the privatization of data\nshared between tasks. Updates of shared values in a task are privatized and\nonly committed to main memory on successful execution of the task, ensuring\nthat data remain consistent despite power failures. Alpaca provides a familiar\nprogramming interface and a highly efficient runtime model. We also present an\nalternate version of Alpaca, Alpaca-undo, that uses undo-logging and rollback\ninstead of privatization and commit. We implemented a prototype of both\nversions of Alpaca as an extension to C with an LLVM compiler pass. We\nevaluated Alpaca, and directly compared to three systems from prior work.\nAlpacaconsistently improves performance compared to the previous systems, by up\nto 23.8x, while also improving memory footprint in many cases, by up to 17.6x.",
    "num_pages": 26
}